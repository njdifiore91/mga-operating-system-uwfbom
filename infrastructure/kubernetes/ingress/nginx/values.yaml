# NGINX Ingress Controller Helm Values Configuration
# Version: ingress-nginx 4.7.1

controller:
  # High availability configuration
  replicaCount: 3
  minAvailable: 2
  
  # Resource allocation
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Autoscaling configuration
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Ingress class configuration
  ingressClass:
    name: nginx
    create: true
    setAsDefault: true
    controller: k8s.io/ingress-nginx

  # Metrics collection
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: mga-monitoring
      interval: 30s
      scrapeTimeout: 10s
      labels:
        release: prometheus

  # NGINX configuration
  config:
    use-forwarded-headers: "true"
    compute-full-forwarded-for: "true"
    use-proxy-protocol: "true"
    
    # SSL/TLS configuration
    ssl-protocols: "TLSv1.2 TLSv1.3"
    ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
    ssl-session-tickets: "false"
    ssl-session-timeout: "10m"
    
    # Proxy settings
    proxy-body-size: "10m"
    proxy-connect-timeout: "10"
    proxy-read-timeout: "60"
    proxy-send-timeout: "60"
    client-header-timeout: "60"
    client-body-timeout: "60"
    
    # Connection handling
    keep-alive-requests: "100"
    keep-alive: "75"
    
    # Compression
    enable-brotli: "true"
    
    # ModSecurity WAF
    enable-modsecurity: "true"
    enable-owasp-modsecurity-crs: "true"
    modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecAuditEngine RelevantOnly
      SecAuditLogParts ABDEFHIJZ
    
    # Rate limiting
    limit-req-status-code: "429"
    limit-conn-status-code: "429"
    limit-rate-after: "100m"
    limit-rate: "10m"
    http-snippet: |
      limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    server-snippet: |
      limit_req zone=api_limit burst=200 nodelay;

# Service configuration for AWS NLB
service:
  type: LoadBalancer
  externalTrafficPolicy: Local
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/certificate-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTPS"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/healthz"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "10254"

# Default backend configuration
defaultBackend:
  enabled: true
  port: 8181
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 256Mi

# Network policies
networkPolicies:
  enabled: true
  ingressPolicyName: default-deny-all

# Admission webhooks
admissionWebhooks:
  enabled: true
  failurePolicy: Fail
  timeoutSeconds: 10