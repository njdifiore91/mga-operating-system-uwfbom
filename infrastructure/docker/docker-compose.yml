version: "3.9"

services:
  backend:
    build:
      context: ../src/backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - DEBUG=mga-os:*
      - LOG_LEVEL=debug
      - CORS_ORIGIN=http://localhost:8080
      - JWT_SECRET=development_secret
      - API_RATE_LIMIT=1000
      - ENABLE_SWAGGER=true
    ports:
      - "3000:3000"
      - "9229:9229"
    volumes:
      - ../src/backend:/app
      - logs:/app/logs
      - /app/node_modules
    networks:
      - backend
      - database
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2G"

  web:
    build:
      context: ../src/web
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000
      - VITE_ENABLE_MOCK=true
      - VITE_ENABLE_DEBUG=true
      - VITE_HOT_RELOAD=true
    ports:
      - "8080:80"
    volumes:
      - ../src/web:/app
      - /app/node_modules
    networks:
      - frontend
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    build:
      context: .
      dockerfile: nginx.dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/logs:/var/log/nginx
    networks:
      - frontend
      - backend
    depends_on:
      - web
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=mga_os
      - POSTGRES_USER=mga_user
      - POSTGRES_PASSWORD=development_only
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mga_user -d mga_os"]
      interval: 30s
      timeout: 10s
      retries: 3
    shm_size: 256mb

  redis:
    image: redis:7.0-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - database
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_LOG_RETENTION_HOURS=24
      - KAFKA_MESSAGE_MAX_BYTES=1000000
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  database:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  logs:
    driver: local