# MGA Operating System Backend Service Helm Values
# Version: 1.0.0
# Helm Version: 3.12.x

# Override chart name if needed
nameOverride: "mga-backend"
fullnameOverride: "mga-backend"

# Container image configuration
image:
  repository: mga-backend
  tag: latest
  pullPolicy: Always

# High availability configuration with minimum 3 replicas
replicaCount: 3

# Pod annotations for monitoring and logging
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"
  fluentbit.io/parser: "json"

# Service account configuration for AWS IAM roles
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/mga-backend-role"
  name: "mga-backend-sa"

# Security context for non-root user execution
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]

# Service configuration with NLB support
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

# Ingress configuration with SSL and rate limiting
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "8m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
  hosts:
    - host: api.mga-os.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: mga-backend-tls
      hosts:
        - api.mga-os.com

# Resource requests and limits for predictable performance
resources:
  requests:
    cpu: 500m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 1Gi

# Horizontal pod autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Pods
          value: 2
          periodSeconds: 30

# Node selection and affinity rules
nodeSelector:
  kubernetes.io/os: linux
  node.kubernetes.io/instance-type: c5.xlarge

tolerations:
  - key: "dedicated"
    operator: "Equal"
    value: "mga-backend"
    effect: "NoSchedule"

# Pod anti-affinity for high availability
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchLabels:
              app: mga-os
              component: backend
          topologyKey: kubernetes.io/hostname
      - weight: 90
        podAffinityTerm:
          labelSelector:
            matchLabels:
              app: mga-os
              component: backend
          topologyKey: topology.kubernetes.io/zone

# Environment variables
env:
  NODE_ENV: production
  PORT: "3000"
  SERVICE_NAME: mga-backend
  LOG_LEVEL: info
  ENABLE_METRICS: "true"
  MAX_HEAP_SIZE: "512m"

# Health check probes
livenessProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    username: mga_user
    database: mga_db
  primary:
    persistence:
      size: 50Gi
      storageClass: gp3
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
  readReplicas:
    replicaCount: 2
    persistence:
      size: 50Gi
      storageClass: gp3

# Redis configuration
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
  master:
    persistence:
      size: 8Gi
      storageClass: gp3
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2Gi
  replica:
    replicaCount: 2
    persistence:
      size: 8Gi
      storageClass: gp3

# Kafka configuration
kafka:
  enabled: true
  replicaCount: 3
  persistence:
    size: 20Gi
    storageClass: gp3
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  zookeeper:
    enabled: true
    replicaCount: 3
    persistence:
      size: 8Gi
      storageClass: gp3

# Prometheus monitoring configuration
prometheus:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: "15s"
    scrapeTimeout: "10s"
  rules:
    enabled: true
    alerting:
      enabled: true